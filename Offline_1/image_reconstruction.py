# -*- coding: utf-8 -*-
"""image_reconstruction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wVfqqUGv9l3XR-gQPf3r21NsZfOf8SCg
"""

import cv2
from google.colab import files
import io
from PIL import Image
import numpy as np
import matplotlib.pyplot as plt


def low_rank_approximation(A, k):

    U, Sigma, Vt = np.linalg.svd(A, full_matrices=False)

    # Truncate to retain only the top k singular values and vectors
    U_k = U[:, :k]
    Sigma_k = np.diag(Sigma[:k])
    Vt_k = Vt[:k, :]

    # Compute the k-rank approximation
    A_k = U_k @ Sigma_k @ Vt_k

    return A_k

# Upload an image
uploaded = files.upload()

# Read the uploaded image
image_path = list(uploaded.keys())[0]
image = cv2.imread(image_path)

# Convert the image to grayscale
gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
(n, m)= gray_image.shape
print(n)
print(m)


# Vary k from 1 to min(m, n) with at least 10 values
k_values = np.linspace(1, 60, 12, dtype=int)

# Plot k-rank approximations
plt.figure(figsize=(15, 10))
for i, k in enumerate(k_values, 1):
    A_k = low_rank_approximation(gray_image, k)
    plt.subplot(3, 4, i)
    plt.imshow(A_k, cmap='gray')
    plt.title(f'n_components = {k}')
plt.tight_layout()
plt.show()