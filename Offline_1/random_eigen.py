# -*- coding: utf-8 -*-
"""random_eigen.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1otbLyzrBgJxDv4Zm_XZUDqyFBOb5Gc6i
"""

import numpy as np

def generate_invertible_matrix(n):
    A = np.random.randint(1, 50, size=(n, n))

    # Matrix invertability check
    while np.linalg.det(A) == 0:
        A = np.random.randint(1, 50, size=(n, n))

    return A

def eigen_decomposition_and_reconstruction(A):
    eigenvalues, eigenvectors = np.linalg.eig(A)

    # Reconstruction of A from eigenvalues and eigenvectors
    A_recon = np.dot(np.dot(eigenvectors, np.diag(eigenvalues)), np.linalg.inv(eigenvectors)) #from section 2.7 A= V diag(lambda) inverse(V)

    return A_recon

# Input: Dimension of the matrix
n = int(input("Enter the dimension of the matrix (n): "))

# Step 1: Generate a random invertible matrix A
A = generate_invertible_matrix(n)

print("\nMatrix A:")
print(A)

# Step 2: Perform Eigen Decomposition and Reconstruction
A_recon = eigen_decomposition_and_reconstruction(A)

# print("\nReconstructed Matrix A:")
# print(A_recon)

# Step 3: Check if the reconstruction worked properly
if np.allclose(A, A_recon):
    print("Reconstruction successful.")
else:
    print("Reconstruction failed.")

